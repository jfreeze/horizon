#!/bin/sh

# File autogenerated by mix horizon.init (source: build.sh.eex)
#
# Build script for a project to be run on the target machine.
# This app is located in the build folder for each `bin_path` and release.
#
# This app can be called remotely via SSH.
#
#    ssh me@build_server "(cd /path/to/deploy; doas ./bin/dir/release.sh)"
#
# Example
#
#    ssh me@192.168.100.100 "(cd /usr/local/my_app; doas ./bin/release-my_app.sh)"
#
# How is this called?
# Who calls it?
# When
#


# Exit immediately if a command exits with a non-zero status
set -e

# Set ELIXIR_ERL_OPTIONS to force UTF-8 encoding
export ELIXIR_ERL_OPTIONS="+fnu"

BUILD_PATH=<%= @build_path %>
BUILD_USER="${BUILD_USER:-<%= @build_user %>}"
BUILD_HOST="${BUILD_HOST:-<%= @build_host %>}"

# . ./<%= @bin_path %>/horizon_helpers.sh

SCRIPT_DIR="$(cd "$(dirname "$0")" && pwd)"
BUILD_SCRIPT="${SCRIPT_DIR}/install_script.sh"

ssh "${BUILD_USER}@${BUILD_HOST}" "sh -s -- $INSTALL_ARGS" <"$INSTALL_SCRIPT"

# Navigate to the project directory
cd "<%= @build_path %>"

echo -e "${GREEN}=== Starting Build Process ===${RESET}"
puts "info" "Setting up assets"
mix local.hex --force
## do we want to do that on the build machine????
##mix deps.get --only prod

exit_if_not_root

# Will need to manually check if tailwind for freebsd is installed as currently the --if-missing flag is not supported when passing in an argument
## install tailwind if it is not installed

mix_assets_setup_freebsd(){
  puts "info" "Checking for tailwind-$(get_arch)"
  if [ ! -f "<%= @build_path %>/_build/tailwind-$(get_arch)" ]; then
    echo -e "${GREEN}  + Installing Tailwind <%= @build_path %>/_build/tailwind-$(get_arch)${RESET}"
    mix assets.setup.freebsd
  else
    echo -e "${GREEN}   + Tailwind installed <%= @build_path %>/_build/tailwind-$(get_arch)${RESET}"
  fi
  echo ""
}

mix_phx_digest_clean() {
  echo -e "${GREEN}=> Cleaning existing digests${RESET}"
  MIX_ENV=prod mix phx.digest.clean --all
  echo ""
}

mix_assets_deploy() {
  echo -e "${GREEN}=> Deploying assets${RESET}"
  MIX_ENV=prod mix assets.deploy
  echo ""
}

mix_release(){
  MIX_ENV=prod mix release <%= if not @is_default?, do: @app %> --overwrite
}

create_app_dir(){
  mkdir -p <%= @app_path %>
  chown -R <%= @build_user %> <%= @app_path %>
}

puts "info" "Creating/Updating the release"

create_app_dir
mix_assets_setup_freebsd
mix_phx_digest_clean
mix_assets_deploy
mix_release

# move this to deploy/release
# sysrc <%= @app %>_enable="YES"
# add_user <%= @app %>

version="$(cut -d' ' -f2 "<%= @app_path %>/releases/start_erl.data")"

 # App is in folder <%= @app_path %> <%= @app %>-$version.tar.gz
# App is ready for deployment to another host or started on the build host.
