load_module /usr/local/libexec/nginx/ngx_mail_module.so;
load_module /usr/local/libexec/nginx/ngx_stream_module.so;
worker_processes auto;

events {
  worker_connections 1024;
}

http {
  include mime.types;
  default_type application/octet-stream;
  client_max_body_size 6M;
  sendfile on;
  keepalive_timeout 65;
  gzip on;
  access_log on;
  access_log /var/log/nginx/access.log;

  <%= for project <- projects do %>
  # Define upstream servers (local or remote)
  upstream backend_<%= Slug.slugify(project.name, separator: ?_) %> {
  <%= for server <- project.servers do %>  server <%= server.internal_ip %>:<%= server.port %>;
  <% end %>}

  # Define server block for HTTP
  server {
    listen 80;
    server_name <%= Enum.join(project.server_names, ",") %>;
    location ^~ /.well-known/acme-challenge/ {
      # Project.acme_challenge_path
      alias <%= project.acme_challenge_path %>/.well-known/acme-challenge/;
    }
    location = /.well-known/acme-challenge/ {
      return 404;
    }
    location / {
      return 301 https://$server_name$request_uri;
    }
  }
  # Define server block for HTTPS
  server {
    listen 443 ssl;
    server_name <%= Enum.join(project.server_names, ",") %>;
    ssl_certificate /usr/local/etc/letsencrypt/live/<%= project.letsencrypt_live %>/fullchain.pem;
    ssl_certificate_key /usr/local/etc/letsencrypt/live/<%= project.letsencrypt_live %>/privkey.pem;

    #location / {
    #    default_type text/plain;
    #    return 200 'Back in ten..';
    #}

    location / {
      proxy_pass http://backend_<%= Slug.slugify(project.name, separator: ?_) %>;

      proxy_set_header Host $host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

      proxy_http_version 1.1;
      proxy_set_header Upgrade $http_upgrade;
      proxy_set_header Connection "Upgrade";
      proxy_set_header Host $host;
    }
  }
<% end %>}
