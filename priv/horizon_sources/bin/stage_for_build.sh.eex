#!/bin/bash -e

#
# This script copies the project source to the build host.
# It is a part of the deploy process, and limits its function
# to copying the project files to the remote host.
#
# ## Required Assigns:
# - app - name of release
# - path - root of release
# - build_path - root of build sources
# - build_user
# - build_host
# - data_dir
#

# ==============================
# Color Definitions
# ==============================
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
RED='\033[0;31m'
NC='\033[0m' # No Color


# ==============================
# Configuration
# ==============================
APP_NAME="<%= @app %>"
SRC_REPO_DIR=$(cd "$(dirname "$0")/.." && pwd)
BUILD_PATH=<%= @build_path %>
BUILD_USER="${BUILD_USER:-<%= @build_user %>}"
BUILD_HOST="${BUILD_HOST:-<%= @build_host %>}"

# Default staging method
STAGING_METHOD="auto" # Options: auto, rsync, tar
FORCE_STAGE=0         # 0 = do not force, 1 = force staging with uncommitted changes

echo ""
echo -e "${GREEN}== STAGING SUMMARY ==${NC}"
echo -e "${GREEN}Staging application: ${NC}$APP_NAME"
echo -e "${GREEN}Source Repo path:    ${NC}$SRC_REPO_DIR"
echo -e "${GREEN}Build path:          ${NC}$BUILD_PATH"
echo -e "${YELLOW}Build user:          ${NC}$BUILD_USER"
echo -e "${YELLOW}Build host:          ${NC}$BUILD_HOST"
echo ""

# ==============================
# Exclude Patterns with type prefixes
# ==============================
EXCLUDE_PATTERNS="d:.git d:deps d:.elixir_ls d:_build f:*.tmp f:._* f:.DS_Store"


# ==============================
# Functions
# ==============================

# Helper function to generate find exclude expressions
# Helper function to generate find exclude expressions
generate_find_excludes() {
  excludes=""
  for pattern in $EXCLUDE_PATTERNS; do
    case "$pattern" in
      d:*)
        dir="${pattern#d:}"
        excludes="$excludes -path './$dir' -prune -o"
        ;;
      f:*)
        file="${pattern#f:}"
        excludes="$excludes ! -name '$file'"
        ;;
    esac
  done
  echo "$excludes"
}


# Helper function to generate --exclude options for rsync and tar
generate_exclude_options() {
  options=""
  for pattern in $EXCLUDE_PATTERNS; do
    # Remove the type prefix
    clean_pattern="${pattern#*:}"
    options="$options --exclude='$clean_pattern'"
  done
  echo "$options"
}

# Function to display usage
usage() {
  echo -e "${GREEN}Usage: $0 [--rsync | --tar] [--force]${NC}"
  echo ""
  echo "To override user and host:"
  echo ""
  echo -e "${GREEN}Usage: ${YELLOW}BUILD_USER=user BUILD_HOST=host${NC} $0 [--rsync | --tar] [--force]"
  echo ""
  
  exit 1
}

# Function to get the current commit hash
get_commit_hash() {
  git -C "$SRC_REPO_DIR" rev-parse HEAD
}

# Function to check for uncommitted changes
check_uncommitted_changes() {
  if ! git -C "$SRC_REPO_DIR" diff-index --quiet HEAD --; then
    if [ "$FORCE_STAGE" -eq 1 ]; then
        echo -e "${RED}Warning: You have uncommitted changes. Proceeding with staging.${NC}" >&2
    else
        echo -e "${RED}Error: You have uncommitted changes. Please commit or stash them before staging.${NC}" >&2
        exit 1
    fi
  fi
}

# Function to compute a hash of the local directory
compute_local_hash() {
  echo "${GREEN}Computing local project hash...${NC}" >&2

  # Change to the repository directory
  cd "$SRC_REPO_DIR" || {
    echo "${RED}Error: Repository directory not found!${NC}" >&2
    exit 1
  }

  excludes=$(generate_find_excludes)

  # Build the find command
  find_cmd="find . $excludes -type f -print0"

  echo "Local find command: $find_cmd" >&2

  eval "$find_cmd" | sort -z | xargs -0 shasum -a 256 | shasum -a 256 | awk '{print $1}'
}


# Function to compute a hash of the remote directory
compute_remote_hash() {
  echo "${GREEN}Computing remote project hash...${NC}" >&2

  excludes=$(generate_find_excludes)

  # Build the find command
  find_cmd="find . $excludes -type f -print0"

  echo "Remote find command: $find_cmd" >&2

  ssh "$BUILD_USER@$BUILD_HOST" "cd '$BUILD_PATH' && $find_cmd | sort -z | xargs -0 shasum -a 256 | shasum -a 256 | awk '{print \$1}'"
}


# Function to stage files using rsync with checksum verification
deploy_rsync() {
  ssh "$BUILD_USER@$BUILD_HOST" "doas mkdir -p \"$BUILD_PATH\""

  EXCLUDE_OPTIONS=$(generate_exclude_options)

  echo -e "${GREEN}Staging using rsync with checksum verification...${NC}"

  eval "rsync -avzc --delete --rsync-path='doas rsync' $EXCLUDE_OPTIONS '$SRC_REPO_DIR/' '$BUILD_USER@$BUILD_HOST:$BUILD_PATH/'"

  if [ $? -ne 0 ]; then
    echo -e "${RED}Error: rsync failed.${NC}" >&2
    exit 1
  fi
}


deploy_tar_scp() {
  echo -e "${GREEN}Staging using tar and ssh pipeline...${NC}"

  # Create the target directory on the remote host if it doesn't exist
  ssh "$BUILD_USER@$BUILD_HOST" "doas mkdir -p \"$BUILD_PATH\" && doas rm -rf \"$BUILD_PATH/*\" && doas mkdir -p \"$BUILD_PATH\""

  # Generate exclude options for tar
  EXCLUDE_OPTIONS=$(generate_exclude_options)
  echo "EXCLUDE_OPTIONS: $EXCLUDE_OPTIONS"

  # Use eval to handle the dynamic options
  eval "COPYFILE_DISABLE=1 tar --no-xattrs --no-acls --no-mac-metadata $EXCLUDE_OPTIONS -czvp . | ssh '$BUILD_USER@$BUILD_HOST' 'doas tar --no-xattrs --no-acls -xzvp -C \"$BUILD_PATH\"'"



  if [ $? -ne 0 ]; then
    echo -e "${RED}Error: tar and ssh pipeline failed.${NC}" >&2
    exit 1
  fi
}

verify() {
  case "$STAGING_METHOD" in
  tar)
    verify_deployment
    ;;
  *)
    echo -e "Using rsync checksum for verification"
    ;;
  esac
}

# Function to verify deployment integrity by comparing hashes
verify_deployment() {
  echo -e "${GREEN}Verifying staging integrity...${NC}"

  LOCAL_HASH=$(compute_local_hash)
  REMOTE_HASH=$(compute_remote_hash)

  if [ "$LOCAL_HASH" == "$REMOTE_HASH" ]; then
    echo -e "${GREEN}Local project hash: $LOCAL_HASH${NC}"
    echo -e "${GREEN}Remote project hash: $REMOTE_HASH${NC}"
    echo -e "${GREEN}Staging verified: Project hashes match.${NC}"
  else
    echo -e "${RED}Local project hash: $LOCAL_HASH${NC}"
    echo -e "${RED}Remote project hash: $REMOTE_HASH${NC}"
    echo -e "${YELLOW}Warning: Project hashes do not match. Target may have pre-existing files or staging may be incomplete or corrupted.${NC}"
  fi
}

# Function to deploy using the selected method
deploy_files() {
  case "$STAGING_METHOD" in
  rsync)
    deploy_rsync
    ;;
  tar)
    deploy_tar_scp
    ;;
  auto)
    if command -v rsync >/dev/null 2>&1; then
      deploy_rsync
      STAGING_METHOD="rsync"
    else
      echo -e "${RED}rsync not found. Falling back to tar and ssh pipeline.${NC}" >&2
      deploy_tar_scp
      STAGING_METHOD="tar"
    fi
    ;;
  *)
    echo -e "${RED}Invalid deployment method: $STAGING_METHOD${NC}" >&2
    exit 1
    ;;
  esac
}

# ==============================
# Parse Command-Line Arguments
# ==============================
while [[ $# -gt 0 ]]; do
  case "$1" in
  --rsync)
    STAGING_METHOD="rsync"
    shift
    ;;
  --tar)
    STAGING_METHOD="tar"
    shift
    ;;
  --force)
    FORCE_STAGE=1
    shift
    ;;
  -h | --help)
    usage
    ;;
  *)
    echo -e "${RED}Unknown option: $1${NC}" >&2
    usage
    ;;
  esac
done

# ==============================
# Locking Mechanism to Prevent Concurrent Deployments
# ==============================
LOCK_FILE="/tmp/<%= @app %>.deploy.lock"

if [ -e "$LOCK_FILE" ]; then
  echo -e "${RED}Another deployment is in progress. Exiting.${NC}" >&2
  exit 1
fi

touch "$LOCK_FILE"

# Ensure the lock is removed on script exit
trap "rm -f $LOCK_FILE" EXIT

# ==============================
# Main Deployment Steps
# ==============================

echo -e "${GREEN}Starting staging process...${NC}"

# Navigate to the repository directory
cd "$SRC_REPO_DIR" || {
  echo -e "${RED}Error: Repository directory not found!${NC}" >&2
  exit 1
}

# Check for uncommitted changes
check_uncommitted_changes

# Get the current commit hash
COMMIT_HASH=$(get_commit_hash)
echo -e "${GREEN}Current commit hash: $COMMIT_HASH${NC}"

# Deploy the files using the selected method
deploy_files

# Verify the deployment
verify

echo -e "${GREEN}Staging completed.${NC}"
